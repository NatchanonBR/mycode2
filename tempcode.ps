C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe $ErrorActionPreference = 'Stop'

Function ParseInputParameter {
    param (
        [string]$Name,
        [string]$Value,
        [string]$Regex
    )

    $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'
    if ($Value -notmatch $ValidParameterRegex) {
        ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
    }
    $parameterValue = $Value.Substring(3)

    $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()
    $trimmedParameterValue = $trimmedParameterValue.Substring(1)
    $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)

    if ($Regex -and $trimmedParameterValue -notmatch $Regex) {
        ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
    } else {
        $trimmedParameterValue
    }
}

function ExitWithFailureMessage {
    param (
        [string]$Message,
        [string]$ExceptionMessage,
        [Switch]$PrintJson
    )
    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
        $errorMessage = $Message
    } else {
        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
    }
    if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}
    WriteStandardError -Message $errorMessage
    [System.Environment]::Exit(1)
}

function ExitWithFailureMessageAndExitCode {
    param (
        [string]$Message,
        [string]$ExceptionMessage,
        [int]$ExitCode,
        [Switch]$PrintJson
    )
    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
        $errorMessage = $Message
    } else {
        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
    }
    if ($PSBoundParameters.ContainsKey('ExitCode') -eq $true) {
        $exitCode = $ExitCode
    } else {
        $exitCode = 1
    }
    if ($PrintJson) {
        $ErrorObject = @{
            error = $errorMessage
            exitCode = $exitCode
        }
        ConvertTo-Json -InputObject $ErrorObject -Compress
    }
    WriteStandardError -Message $errorMessage
    [System.Environment]::Exit($exitCode)
}

function ExitWithSuccessMessage {
    param (
        [string]$Message
    )
    Write-Host $Message
    [System.Environment]::Exit(0)
}

function WriteStandardError {
    param (
        [string]$Message
    )
    $Host.UI.WriteErrorLine($Message)
}

$script:ResultProperty = 'results'
$script:DataProperty = 'data'
$script:NextTokenProperty = 'nextToken'

function ConvertBase64ToString {
    param (
        [string]$Base64
    )
    $bytes = [System.Convert]::FromBase64String($Base64)
    [System.Text.Encoding]::UTF8.GetString($bytes)
}

function ConvertStringToBase64 {
    param (
        [string]$String
    )
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($String)
    [System.Convert]::ToBase64String($bytes)
}

function GetCompressionBoolean {
    param (
        [ValidateSet('No','Yes')]
        [string]$CompressOutput
    )
    if ($CompressOutput -eq 'Yes') {
        $true
    } else {
        $false
    }
}

function GetJson {
    param ($InputObject)
    ConvertTo-Json -InputObject $InputObject -Compress -Depth 5
}

function GetBase64EncodedGzipString {
    param ($InputString)

    $inputBytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)

    try {
        $memoryStream = New-Object -TypeName 'System.IO.MemoryStream'
        $compressionMode = [System.IO.Compression.CompressionMode]::Compress
        $gzipStream = New-Object -TypeName 'System.IO.Compression.GzipStream' -ArgumentList @($memoryStream, $compressionMode)

        $gzipStream.Write($inputBytes, 0, $inputBytes.Length)
        $gzipStream.Close()
        $memoryStream.Close()

        [System.Convert]::ToBase64String($memoryStream.ToArray())
    } finally {
        $gzipStream.Dispose()
        $memoryStream.Dispose()
    }
}

function GetResultAsString {
    param (
        [PSObject]$Object,
        [bool]$Completed,
        [switch]$ConvertNextTokenToBase64,
        [bool]$EnableCompression,
        [bool]$ForceEmptyNextToken,
        [string]$NextToken,
        [string]$PaginationProperty,
        [array]$StringReplacementRegex
    )

    if ([string]::IsNullOrWhiteSpace($NextToken)) {
        if ($Completed -eq $false -and $Object.Count -ge 1 -and $ForceEmptyNextToken -ne $true) {
            if ($PaginationProperty -eq '.') {
                $NextToken = $Object[-1]
            } else {
                $NextToken = $Object[-1].$PaginationProperty
            }
        }
    }

    if ($ForceEmptyNextToken) {
        $NextToken = [string]::Empty
    } elseif ($ConvertNextTokenToBase64) {
        $NextToken = ConvertStringToBase64 -String $NextToken
    }

    $data = @{
        $script:ResultProperty    = $Object
        $script:NextTokenProperty = $NextToken
    }

    if ($EnableCompression -eq $true) {
        $string = GetJson -InputObject $data

        if ($StringReplacementRegex.Count -eq 2) {
            $string = $string -replace $StringReplacementRegex
        }

        $data = GetBase64EncodedGzipString -InputString $string
    }

    $output = GetJson -InputObject @{
        $script:DataProperty = $data
    }
    if ($StringReplacementRegex.Count -eq 2) {
        $output -replace $StringReplacementRegex
    } else {
        $output
    }
}

function GetMaximumOutputBytes {
    param (
        $AllowTruncatedOutput,
        [int]$MaximumOutputSize = 2500
    )
    if ($AllowTruncatedOutput -eq 'Yes') {
        0
    } else {
        $padding = (GetResultAsString -Object @() -Completed $false -EnableCompression $false).length
        $MaximumOutputSize - $padding
    }
}

function ProcessItems {
    param (
        [scriptblock]$ScriptBlock,
        [switch]$ConvertNextTokenToBase64,
        [int]$ChunksPerLoop = 1,
        [bool]$EnableCompression,
        [int]$MaximumOutputBytes,
        [string]$PaginationProperty,
        [string]$PropertyToRemove,
        [string]$NextToken,
        [switch]$SetNextTokenBeforeAdding,
        [array]$StringReplacementRegex
    )

    $chunkedOutputArray = New-Object -TypeName 'System.Collections.ArrayList'

    $outputResult = [string]::Empty

    $outputTooBig = $false
    $counter = 0

    $getResultString = @{
        EnableCompression = $EnableCompression
        PaginationProperty = $PaginationProperty
        StringReplacementRegex = $StringReplacementRegex
    }

    foreach ($item in (& $ScriptBlock)) {
        if ($outputTooBig -eq $true) { break }

        if ($NextToken -ne '*') {
            if ($PaginationProperty -eq '.' -and $item -le $NextToken) {
                continue
            } elseif ($PaginationProperty -ne '.' -and $item.$PaginationProperty -le $NextToken) {
                continue
            }
        }

        if ($SetNextTokenBeforeAdding) {
            if ($PaginationProperty -eq '.') {
                $newNextToken = $item
            } else {
                $newNextToken = $item.$PaginationProperty
            }
        }

        if ($PropertyToRemove) {
            $item.PSObject.properties.remove($PropertyToRemove)
        }

        $null = $chunkedOutputArray.Add($item)

        if ($counter -lt $ChunksPerLoop) {
            $counter++
            continue
        }

        $counter = 0

        $properties = @{
            Object = $chunkedOutputArray
            Completed = $outputTooBig
        }
        if ($ConvertNextTokenToBase64) {
            $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)
        }
        if ($SetNextTokenBeforeAdding) {
            $properties.Add('NextToken', $newNextToken)
        }
        $tempResult = GetResultAsString @properties @getResultString

        if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
            $outputResult = $tempResult
        } else {
            $outputTooBig = $true
            break
        }
    }

    # Processing remaining items if the output isn't too big yet
    if ($outputTooBig -eq $false) {
        $properties = @{
            Object = $chunkedOutputArray
            Completed = $outputTooBig
            ForceEmptyNextToken = $true
        }
        if ($ConvertNextTokenToBase64) {
            $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)
        }
        if ($SetNextTokenBeforeAdding) {
            $properties.Add('NextToken', $newNextToken)
        }
        $tempResult = GetResultAsString @getResultString @properties
        if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
            $outputResult = $tempResult
        }
    }

    $outputResult
}

# Total memory consumption percentage
function GetTotalMemoryUsage
{
    $ComputerMemory =  Get-CimInstance -Class WIN32_OperatingSystem
    $Memory = ((($ComputerMemory.TotalVisibleMemorySize - $ComputerMemory.FreePhysicalMemory)*100)/ $ComputerMemory.TotalVisibleMemorySize)
    return [String][math]::Round($Memory, 2)
}

# get the percentage value of total CPU usage consumption
function GetTotalCPUUsage
{
    $Processors = Get-CimInstance -Query 'select Name, PercentProcessorTime from Win32_PerfFormattedData_PerfOS_Processor'
    foreach ($processor in $Processors) {
        if ($processor.Name -like '_Total') {
            return [String]$processor.PercentProcessorTime
        }
    }
}
$PrintInteractiveStatements = Write-Output --%{No}
$PrintInteractiveStatements = ParseInputParameter -Name 'PrintInteractiveStatements' -Value $PrintInteractiveStatements -Regex '(Yes|No)'

$script:FMToken = '__FM_SESSION_OUTPUT__'
$script:DataProperty = 'data'
$script:TimestampProperty = 'timestamp'
$script:ProcessUsageDetailsProperty = 'processDetails'
$script:SystemUsageProperty = 'systemDetails'
$script:TotalCpuUsageProperty = 'totalCpuUsage'
$script:TotalMemoryUsageProperty = 'totalMemoryUsage'

Function Main {
    $selectObject = @{Property = @(
    @{Name='id';      Expression = {[String]$_.IDProcess}},
    @{Name='name';    Expression = {$_.name}},
    @{Name='cpu';     Expression = {[String]$_.PercentProcessorTime}},
    @{Name='memory';  Expression = {[String][Math]::Round(($_.workingSetPrivate / 1mb),2)}},
    @{Name='handles'; Expression = {$_.HandleCount}},
    @{Name='startTime'; Expression = {((Get-Date) - (New-TimeSpan -Seconds $_.elapsedTime)).ToString('r')}},
    @{Name='threadCount'; Expression = {$_.ThreadCount}}
)}

    # id, name, cpu, memory, handles, startTime, threadCount
    $process = Get-WmiObject -class Win32_PerfFormattedData_PerfProc_Process -filter { name!='_Total' and name!='Idle' }|
                Select-Object @selectObject | Sort-Object -Descending 'Memory'

    $processDetails = @{
        $script:SystemUsageProperty = @{
            $script:TotalCpuUsageProperty = GetTotalCPUUsage
            $script:TotalMemoryUsageProperty = GetTotalMemoryUsage
        }
        $script:ProcessUsageDetailsProperty = $process
    }

    [int]$Timestamp = Get-Date -UFormat %s

    $string = GetJson -InputObject @{
        $script:TimestampProperty = $Timestamp
        $script:DataProperty = $processDetails
    }

    $output = $script:FMToken

    $output+$string
}

do {
    Main
    ''

    if ($PrintInteractiveStatements -eq 'Yes') {
        $continue = Read-Host -Prompt 'Press q to end the loop or press any other key to continue.'
    } else {
        $continue = Read-Host
    }
} while ($continue -ne 'q')
